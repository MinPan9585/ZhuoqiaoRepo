//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Parkour & Climbing System/Game/Input Manager/InputActionManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if inputsystem
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
namespace FC_ParkourSystem
{
    public partial class @InputActionManager: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActionManager()
        {
            asset = InputActionAsset.FromJson(@"{
        ""name"": ""InputActionManager"",
        ""maps"": [
            {
                ""name"": ""Climbing"",
                ""id"": ""31d9bada-d049-429a-a679-23a6fea2393f"",
                ""actions"": [
                    {
                        ""name"": ""MoveInput"",
                        ""type"": ""Value"",
                        ""id"": ""3a22928f-304c-446f-84d0-068295b96b16"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    },
                    {
                        ""name"": ""CameraInput"",
                        ""type"": ""Value"",
                        ""id"": ""0b0c2f48-a803-481f-bc5d-83bba15bc5f5"",
                        ""expectedControlType"": ""Delta"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    },
                    {
                        ""name"": ""Jump"",
                        ""type"": ""Button"",
                        ""id"": ""486596aa-671f-44e1-a55d-6f7fe47899bb"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""Drop"",
                        ""type"": ""Button"",
                        ""id"": ""5aadc601-d133-4886-ae65-28a495be5dad"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""SprintKey"",
                        ""type"": ""Button"",
                        ""id"": ""c4d8e4d7-b929-4cc4-8304-3874cfc013b5"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""SprintMode"",
                        ""type"": ""Button"",
                        ""id"": ""53cfff5d-a67b-486a-9d03-a8c03b3bcc64"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""JumpFromHang"",
                        ""type"": ""Button"",
                        ""id"": ""40aaf97e-c2d6-4fdf-a03a-b1925d62a322"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    }
                ],
                ""bindings"": [
                    {
                        ""name"": ""2D Vector"",
                        ""id"": ""d17a953b-1527-40ac-81ce-ea8a819fe15c"",
                        ""path"": ""2DVector(mode=1)"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""MoveInput"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""Up"",
                        ""id"": ""01efa18f-9f1f-47ac-b8a9-dd1c60690dcc"",
                        ""path"": ""<Keyboard>/w"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""Down"",
                        ""id"": ""0768f644-c004-4375-88a0-a2734905f591"",
                        ""path"": ""<Keyboard>/s"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""Left"",
                        ""id"": ""aaa60bac-6707-4d41-9243-ab7ac063c804"",
                        ""path"": ""<Keyboard>/a"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""Right"",
                        ""id"": ""0ab43486-7b03-4a4a-80ee-896ac65825a5"",
                        ""path"": ""<Keyboard>/d"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": """",
                        ""id"": ""9eb0b6cd-543f-4454-bd5d-c1036d47818d"",
                        ""path"": ""<Gamepad>/leftStick"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""3440a5ca-7526-45c7-98bf-d3e63642a859"",
                        ""path"": ""<Gamepad>/leftStick"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""MoveInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""133b8c48-aa99-4f3b-981d-70b6587bb9b9"",
                        ""path"": ""<Gamepad>/rightStick"",
                        ""interactions"": """",
                        ""processors"": ""ScaleVector2(x=0.5,y=0.5)"",
                        ""groups"": ""Joystick"",
                        ""action"": ""CameraInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""22313342-cbfa-43ea-8bce-efe05de1dc20"",
                        ""path"": ""<Mouse>/delta"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""CameraInput"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""cabef7a4-4089-4ac8-ad83-3b3623121b56"",
                        ""path"": ""<Keyboard>/space"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""f68aa4fc-5bcf-4fb3-9e81-6ea1d8fa841d"",
                        ""path"": ""<Gamepad>/buttonSouth"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""7ee67402-9fc6-4457-906b-2f060aca1264"",
                        ""path"": ""<Gamepad>/buttonSouth"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""fa3142c7-298d-40c6-ab5b-94338a42e044"",
                        ""path"": ""<Keyboard>/c"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""Drop"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""c42a5e80-c150-4cd7-ba4a-9be92c694f27"",
                        ""path"": ""<Gamepad>/buttonEast"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""Drop"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""d2d4d7e2-a056-4e6b-b8e0-5a8e1abaa550"",
                        ""path"": ""<Gamepad>/buttonEast"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""Drop"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""cc3fc6c2-d487-4221-b135-6e72ed30421c"",
                        ""path"": ""<Keyboard>/shift"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""SprintKey"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""e300d002-0246-4ae9-b0eb-bfeab0eea59b"",
                        ""path"": ""<Gamepad>/rightTrigger"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""SprintKey"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""77a7e58c-ee74-4ff0-b3ea-48e938b7e5c4"",
                        ""path"": ""<Gamepad>/rightTrigger"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""SprintKey"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""03cd21f6-e7fb-4f16-a937-d5e0a217f5f0"",
                        ""path"": ""<Keyboard>/tab"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""SprintMode"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""8d882ba8-b92f-49d3-877c-35d77d283613"",
                        ""path"": ""<Gamepad>/leftShoulder"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""SprintMode"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""471530c7-74db-4148-9f40-e053f2463906"",
                        ""path"": ""<Gamepad>/leftShoulder"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""SprintMode"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""529e8fda-5f3f-4736-a9b7-3038460853fa"",
                        ""path"": ""<Keyboard>/q"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Keyboard"",
                        ""action"": ""JumpFromHang"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""1afd419d-0a29-4adb-8ba7-c29a5d8da1a7"",
                        ""path"": ""<Gamepad>/rightTrigger"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Joystick"",
                        ""action"": ""JumpFromHang"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""0db2e4c4-7b5f-4eb8-acd2-a38e9a5a5773"",
                        ""path"": ""<Gamepad>/rightTrigger"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": ""Mobile"",
                        ""action"": ""JumpFromHang"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    }
                ]
            }
        ],
        ""controlSchemes"": [
            {
                ""name"": ""Keyboard"",
                ""bindingGroup"": ""Keyboard"",
                ""devices"": [
                    {
                        ""devicePath"": ""<Keyboard>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Joystick"",
                ""bindingGroup"": ""Joystick"",
                ""devices"": [
                    {
                        ""devicePath"": ""<AndroidGamepad>"",
                        ""isOptional"": true,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Mouse"",
                ""bindingGroup"": ""Mouse"",
                ""devices"": [
                    {
                        ""devicePath"": ""<VirtualMouse>"",
                        ""isOptional"": false,
                        ""isOR"": false
                    }
                ]
            },
            {
                ""name"": ""Mobile"",
                ""bindingGroup"": ""Mobile"",
                ""devices"": []
            }
        ]
    }");
            // Climbing
            m_Climbing = asset.FindActionMap("Climbing", throwIfNotFound: true);
            m_Climbing_MoveInput = m_Climbing.FindAction("MoveInput", throwIfNotFound: true);
            m_Climbing_CameraInput = m_Climbing.FindAction("CameraInput", throwIfNotFound: true);
            m_Climbing_Jump = m_Climbing.FindAction("Jump", throwIfNotFound: true);
            m_Climbing_Drop = m_Climbing.FindAction("Drop", throwIfNotFound: true);
            m_Climbing_SprintKey = m_Climbing.FindAction("SprintKey", throwIfNotFound: true);
            m_Climbing_SprintMode = m_Climbing.FindAction("SprintMode", throwIfNotFound: true);
            m_Climbing_JumpFromHang = m_Climbing.FindAction("JumpFromHang", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Climbing
        private readonly InputActionMap m_Climbing;
        private List<IClimbingActions> m_ClimbingActionsCallbackInterfaces = new List<IClimbingActions>();
        private readonly InputAction m_Climbing_MoveInput;
        private readonly InputAction m_Climbing_CameraInput;
        private readonly InputAction m_Climbing_Jump;
        private readonly InputAction m_Climbing_Drop;
        private readonly InputAction m_Climbing_SprintKey;
        private readonly InputAction m_Climbing_SprintMode;
        private readonly InputAction m_Climbing_JumpFromHang;
        public struct ClimbingActions
        {
            private @InputActionManager m_Wrapper;
            public ClimbingActions(@InputActionManager wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveInput => m_Wrapper.m_Climbing_MoveInput;
            public InputAction @CameraInput => m_Wrapper.m_Climbing_CameraInput;
            public InputAction @Jump => m_Wrapper.m_Climbing_Jump;
            public InputAction @Drop => m_Wrapper.m_Climbing_Drop;
            public InputAction @SprintKey => m_Wrapper.m_Climbing_SprintKey;
            public InputAction @SprintMode => m_Wrapper.m_Climbing_SprintMode;
            public InputAction @JumpFromHang => m_Wrapper.m_Climbing_JumpFromHang;
            public InputActionMap Get() { return m_Wrapper.m_Climbing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ClimbingActions set) { return set.Get(); }
            public void AddCallbacks(IClimbingActions instance)
            {
                if (instance == null || m_Wrapper.m_ClimbingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ClimbingActionsCallbackInterfaces.Add(instance);
                @MoveInput.started += instance.OnMoveInput;
                @MoveInput.performed += instance.OnMoveInput;
                @MoveInput.canceled += instance.OnMoveInput;
                @CameraInput.started += instance.OnCameraInput;
                @CameraInput.performed += instance.OnCameraInput;
                @CameraInput.canceled += instance.OnCameraInput;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @SprintKey.started += instance.OnSprintKey;
                @SprintKey.performed += instance.OnSprintKey;
                @SprintKey.canceled += instance.OnSprintKey;
                @SprintMode.started += instance.OnSprintMode;
                @SprintMode.performed += instance.OnSprintMode;
                @SprintMode.canceled += instance.OnSprintMode;
                @JumpFromHang.started += instance.OnJumpFromHang;
                @JumpFromHang.performed += instance.OnJumpFromHang;
                @JumpFromHang.canceled += instance.OnJumpFromHang;
            }

            private void UnregisterCallbacks(IClimbingActions instance)
            {
                @MoveInput.started -= instance.OnMoveInput;
                @MoveInput.performed -= instance.OnMoveInput;
                @MoveInput.canceled -= instance.OnMoveInput;
                @CameraInput.started -= instance.OnCameraInput;
                @CameraInput.performed -= instance.OnCameraInput;
                @CameraInput.canceled -= instance.OnCameraInput;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
                @SprintKey.started -= instance.OnSprintKey;
                @SprintKey.performed -= instance.OnSprintKey;
                @SprintKey.canceled -= instance.OnSprintKey;
                @SprintMode.started -= instance.OnSprintMode;
                @SprintMode.performed -= instance.OnSprintMode;
                @SprintMode.canceled -= instance.OnSprintMode;
                @JumpFromHang.started -= instance.OnJumpFromHang;
                @JumpFromHang.performed -= instance.OnJumpFromHang;
                @JumpFromHang.canceled -= instance.OnJumpFromHang;
            }

            public void RemoveCallbacks(IClimbingActions instance)
            {
                if (m_Wrapper.m_ClimbingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IClimbingActions instance)
            {
                foreach (var item in m_Wrapper.m_ClimbingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ClimbingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ClimbingActions @Climbing => new ClimbingActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_JoystickSchemeIndex = -1;
        public InputControlScheme JoystickScheme
        {
            get
            {
                if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
                return asset.controlSchemes[m_JoystickSchemeIndex];
            }
        }
        private int m_MouseSchemeIndex = -1;
        public InputControlScheme MouseScheme
        {
            get
            {
                if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
                return asset.controlSchemes[m_MouseSchemeIndex];
            }
        }
        private int m_MobileSchemeIndex = -1;
        public InputControlScheme MobileScheme
        {
            get
            {
                if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
                return asset.controlSchemes[m_MobileSchemeIndex];
            }
        }
        public interface IClimbingActions
        {
            void OnMoveInput(InputAction.CallbackContext context);
            void OnCameraInput(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnSprintKey(InputAction.CallbackContext context);
            void OnSprintMode(InputAction.CallbackContext context);
            void OnJumpFromHang(InputAction.CallbackContext context);
        }
    }
}
#endif